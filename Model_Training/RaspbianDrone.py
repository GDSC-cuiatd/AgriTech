# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FnmIdv3pFOgmZ6ajZjefgcRxVnUQsE80
"""
import os
import cv2
import numpy as np
import tensorflow as tf
from PIL import Image
import RPi.GPIO as GPIO

# Load the classification model
classification_model = tf.keras.models.load_model('path_to_classification_model.h5')
segmentation_model = tf.keras.models.load_model('path_to_segmentation_model.h5')

# GPIO setup
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(3, GPIO.OUT)

# Function to preprocess the image for classification
def preprocess_for_classification(img):
    img = cv2.resize(img, (224, 224))  # Resize to match the input size of the classification model
    img_array = np.array(img) / 255.0  # Normalize the image
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    return img_array

# Function to preprocess the image for segmentation
def preprocess_for_segmentation(img):
    img = cv2.resize(img, (250, 250))  # Resize to match the input size of the segmentation model
    img_array = np.array(img) / 255.0  # Normalize the image
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    return img_array

# Function to classify the image
def classify_image(img):
    # Preprocess the image for classification
    img_array = preprocess_for_classification(img)
    
    # Predict classification
    prediction = classification_model.predict(img_array)
    label = "Diseased" if prediction[0][0] > 0.5 else "Healthy"
    
    return label

# Function to perform segmentation
def segment_image(img):
    # Preprocess the image for segmentation
    img_array = preprocess_for_segmentation(img)
    
    # Predict segmentation
    segmented_image = segmentation_model.predict(img_array)
    
    return segmented_image

# Function to capture image using PiCam
def capture_image():
    camera = cv2.VideoCapture(0)
    _, img = camera.read()
    camera.release()
    return img

# Main function
def main():
    # Capture image using PiCam
    img = capture_image()
    
    # Classify the image
    label = classify_image(img)
    
    # Turn on LED based on classification
    if label == "Diseased":
        GPIO.output(3, GPIO.HIGH)
    else:
        GPIO.output(3, GPIO.LOW)
    
    # Perform segmentation if diseased
    if label == "Diseased":
        segmented_image = segment_image(img)
        
        # Display original and segmented images
        cv2.imshow("Original Image", img)
        cv2.imshow("Segmented Image", segmented_image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    else:
        # Display only original image
        cv2.imshow("Original Image", img)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
